name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    # Runs at 15:00 UTC on Fri 
    - cron: "0 15 * * 5"

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Install linux deps
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo apt-get install --no-install-recommends -y pkg-config libx11-dev libxi-dev libgl1-mesa-dev libasound2-dev
      - run: rustup target add wasm32-unknown-unknown
      - uses: actions/checkout@v2
      - uses: jetli/wasm-pack-action@v0.3.0
      - name: Print versions
        run: rustc --version && cargo --version && wasm-pack --version
      - name: Build macroquad native
        run: cargo build --verbose
      - name: Build macroquad web
        run: cargo build --verbose --target wasm32-unknown-unknown
      - name: Build raw canvas
        run: wasm-pack build --target web --dev -- --no-default-features --features raw_canvas
      - name: Run tests
        run: cargo test --verbose --all-features
      - name: Reject fixmes
        # Grep return success when found and failure when not found, using `!` inverts that.
        # The `[F]` is the usualy trick to avoid matching itself.
        run: "! grep -r --exclude-dir=target [F]IXME ."

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: cargo fmt --version
      - run: cargo fmt -- --check

  clippy:
    runs-on: ubuntu-latest
    steps:
      - run: sudo apt-get install --no-install-recommends -y pkg-config libx11-dev libxi-dev libgl1-mesa-dev libasound2-dev
      - uses: actions/checkout@v2
      - run: cargo clippy --version
        # Technically --all-features doesn't check all code when something is *disabled* by a feature
        # but that is discouraged and no such feature existed at the time this was added.
      - run: cargo clippy --all-features --all-targets -- --deny warnings

  audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/install@v0.1
        with:
          crate: cargo-audit
          version: latest
      - run: cargo audit --version
      # https://github.com/rust-random/getrandom/issues/175
      - run: cargo audit --deny warnings --ignore RUSTSEC-2020-0056
